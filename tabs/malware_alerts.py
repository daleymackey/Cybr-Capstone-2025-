import dash
from dash import dcc, html
import dash_bootstrap_components as dbc
import plotly.graph_objects as go
import polars as pl

def create_malware_alerts_tab(malware_alerts):
    
    def get_severity_chart(data):
        # Threat severity distribution
        severity_counts = data.group_by("severity").count().sort("count", descending=True)
        
        severities = severity_counts['severity'].to_list()
        counts = severity_counts['count'].to_list()
        
        # Color code by severity: red=high, orange=medium, green=low
        color_map = {'High': 'red', 'Medium': 'orange', 'Low': 'green'}
        colors = [color_map.get(sev, 'gray') for sev in severities]
        
        fig = go.Figure(data=[go.Pie(labels=severities, values=counts)])
        fig.update_traces(marker_colors=colors, textinfo='label+percent')
        fig.update_layout(title="Threat Severity Distribution")
        return apply_grey_theme(fig) 
    
    def get_threat_types_chart(data):
        # Most common threat types
        threat_counts = data.group_by("threat_type").count().sort("count", descending=True).head(10)
        
        types = threat_counts['threat_type'].to_list()
        counts = threat_counts['count'].to_list()
        
        fig = go.Figure(data=[go.Bar(x=counts, y=types, orientation='h')])
        fig.update_layout(
            title="Top 10 Threat Types Detected",
            xaxis_title="Number of Detections",
            yaxis_title="Threat Type",
            height=500
        )
        return apply_grey_theme(fig)

    def get_remediation_status_chart(data):
        # Remediation effectiveness tracking
        status_counts = data.group_by("remediation_status").count().sort("count", descending=True)
        
        statuses = status_counts['remediation_status'].to_list()
        counts = status_counts['count'].to_list()
        
        # Color code: green=resolved, yellow=in progress, red=unresolved
        color_map = {'Resolved': 'green', 'In Progress': 'orange', 'Unresolved': 'red'}
        colors = [color_map.get(status, 'gray') for status in statuses]
        
        fig = go.Figure(data=[go.Bar(x=statuses, y=counts, marker_color=colors)])
        fig.update_layout(
            title="Threat Remediation Status",
            xaxis_title="Remediation Status",
            yaxis_title="Number of Threats"
        )
        return apply_grey_theme(fig)
    
    def apply_grey_theme(fig):
        """Apply consistent grey theme to all charts"""
        fig.update_layout(
            plot_bgcolor='#e0e5e8',      # Grey chart background
            paper_bgcolor='#e0e5e8',     # Grey outer background  
            font=dict(color="#425a72"),  # Dark grey text
            title=dict(font=dict(color='#2c3e50', size=16))
        )
        return fig
    
    def get_threats_timeline_chart(data):
        # Threats detected over time by hour
        timeline_data = data.with_columns([
            pl.col("detection_time").str.to_datetime().dt.hour().alias("hour")
        ]).group_by(["hour", "severity"]).count().sort("hour")
        
        # Separate by severity
        high_data = timeline_data.filter(pl.col("severity") == "High")
        medium_data = timeline_data.filter(pl.col("severity") == "Medium")
        low_data = timeline_data.filter(pl.col("severity") == "Low")
        
        fig = go.Figure()
        
        if len(high_data) > 0:
            fig.add_trace(go.Scatter(
                x=high_data['hour'].to_list(),
                y=high_data['count'].to_list(),
                mode='lines+markers',
                name='High Severity',
                line=dict(color='red')
            ))
        
        if len(medium_data) > 0:
            fig.add_trace(go.Scatter(
                x=medium_data['hour'].to_list(),
                y=medium_data['count'].to_list(),
                mode='lines+markers',
                name='Medium Severity',
                line=dict(color='orange')
            ))
        
        if len(low_data) > 0:
            fig.add_trace(go.Scatter(
                x=low_data['hour'].to_list(),
                y=low_data['count'].to_list(),
                mode='lines+markers',
                name='Low Severity',
                line=dict(color='green')
            ))
        
        fig.update_layout(
            title="Threat Detection Timeline by Severity",
            xaxis_title="Hour of Day (24h format)",
            yaxis_title="Number of Threats Detected"
        )
        return apply_grey_theme(fig)
    
    return dbc.Container([
        dbc.Row([
            dbc.Col([
                html.H3("ðŸ¦  Malware & Threat Analytics", className="mb-3"),
            ], width=12)
        ]),
        dbc.Row([
            dbc.Col([
                dbc.Card([
                    dbc.CardBody([
                        html.H5(f"Total Threats Detected: {len(malware_alerts):,}", className="card-title"),
                        html.P(f"Data Range: {malware_alerts.shape[0]} records", className="card-text")
                    ])
                ], color="warning", outline=True)
            ], width=6),
            dbc.Col([
                dcc.Graph(
                    figure=get_severity_chart(malware_alerts),
                    style={'height': '500px'}
                )
            ], width=6)
        ]),
        dbc.Row([
            dbc.Col([
                dcc.Graph(
                    figure=get_threats_timeline_chart(malware_alerts),
                    style={'height': '500px'}
                )
            ], width=12)
        ]),
        dbc.Row([
            dbc.Col([
                dcc.Graph(
                    figure=get_threat_types_chart(malware_alerts),
                    style={'height': '500px'}
                )
            ], width=6),
            dbc.Col([
                dcc.Graph(
                    figure=get_remediation_status_chart(malware_alerts),
                    style={'height': '500px'}
                )
            ], width=6)
        ])
    ])
    
    